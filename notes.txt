
# -- --------------------------------------------------------------------------------------------------- -- #
# -- project: Multivariate Linear Regression with Symbolic Regressors and L1L2 Regularization            -- #
# -- for future prices prediction, the case for UsdMxn                                                   -- #
# -- script: notes.txt : text file with general notes                                                    -- #
# -- author: IFFranciscoME                                                                               -- #
# -- license: GPL-3.0 License                                                                            -- #
# -- repository: https://github.com/IFFranciscoME/A3_Regresion_Simbolica                                 -- #
# -- --------------------------------------------------------------------------------------------------- -- #

# este es un ejemplo de como declarar cada variable como simbolica
# sustituir una variable simbolica en la expresion
# tener un objeto tipo simbolico sympy

# evaluar la variable con el valor que se desea para agregar resultado numerico de la
# expresion simbolica en el cuadro de features
# data_features.eval("gplearn={}".format(exp_sim), inplace=True)

# PROCESO: buscar el menor score en la funcion simbolic regresor modificando los procentajes de
# mutación, de stopping criteria, y la semilla: encontrado fue aprox .305
# dividir para obtener las variables (4 se me hizo el numero óptimo al ver exp_sim)
# se logró reducir hasta 62,134 el rss
# observación: "abs" y "sen" no estan en op_sim, no se están tomando en cuenta por lo que veo

# -- PASOS a seguir
# 1ero - Regresion simbolica para obtener regresores "Individuales", Hacer esto manualmente.
# (Ingenieria de variables simbolicas a traves un proceso de separacion de componentes de una regresion
# simbolica con gplearn).
# Una prueba semi/manual en python con un modelo simple, ridge, lasso y elasticnet.
# revisar como separar las subcomponentes del resultado de la regreion simbolica sistematicamente.
# ma_hl_5*(lag_ol_5 + ma_ho_6 - ma_oi_6)*(lag_ol_6 + 0.074 + ma_hl_3*(lag_ol_4 - ma_ol_3)/lag_ho_4)
# paralelizar proces de uso de gplearn para generar unos regresores muy buenos y correlacionados con
# la variable a explicar.
# 2do - Un muy buen proceso de ajuste de un modelo de Regresion lineal.
# 3ero - Un muy buen proceso de ajuste de un modelo de Regresion.

# -- Elementos de automatizacion de extraccion de features
# separar el feature general en N sub-ecuaciones

# evaluar cada una de las N sub-equaciones para generar N nuevos features
# -- Bajo el supuesto de haber separado los n = 4 sub ecuaciones

# Otro experimento es hacer el producto hadamard con features en el mismo punto del tiempo (periodo)
# ej: lag_hl_1 (hadamard) ma_hl_1

# -- jUEVES 29.10
# IDEA A FUTURO: UN BOSQUE DE ARBOLES Y CADA ARBOL ES UN CONJUNTO DE OPERACIONES SIMBOLICAS A LOS FEATURES
DE ENTRADA.

- Hacer varios casos para comparar
- Primer paso: tomar los features originales, introducirlos en regresion simbolica, observar las operaciones
que resultan de la regresion simbolica, extraer a mano las operaciones, hacer las operaciones con los
features originales, correr regresion lineal clasica con los features originales y con los features nuevos
(transformaciones resultantes de las operaciones utilizadas en regresion simbolica).

RUTAS HEURISTICAS V0.1

"ramped half and half"

- Profundidad inicial, con el termino init_depth, para la poblacion inicial (arbol inicial) que sea en un
  rango muy variado y amplio para poder tener arboles amplios de donde se elija una gran variedad de
  sub-arboles y de nodos.
- Metodo de inicializacion, con el termino init_method, con un valor de "Half and Half", que es
  tener la posibilidad de generar arboles con variaciones entre sus parametros de profundidad y amplitud,
  expresadas en "depth" y "grow"
- Con ambas cosas anteriores se esta inicializando con el metodo "ramped half and half" como se menciona
  en el documento de apoyo (paper).

"Objetivo por correlacion"

- la metrica de ajuste, con el parametro "metric", se elige "pearson". Para poder generar varias
  variables explicativas a la vez, se maximiza la correlacion de estas respecto a la variable a explicar, y
  se hace el calculo con el valor absoluto para que tambien se incluyan variables explicativas con
  correlacion alta negativa.
  Otra sugerencia es que se utilice pearson cuando las variables seran utilizadas para un modelo lineal,
  y spearman para cuando es un modelo basado en arboles. Para el caso de un modelo lineal, hace sentido
  puesto que las variables explicativas son relacionadas mediante una combinacion lineal de las mismas
  para realizar la prediccion.
  Los resultados de las variables generadas con menor correlacion entre ellas se reportan en el hall_of_fame,
  y con el n_components se seleccionan las top N variables de acuerdo a su correlacion con la variable
  explicativa.

"Cross over y mutaciones".

- p_crossover: consiste en dos torneos, en el primero se elige al ganador (menor error) y aleatoriamente se elige
ua rama para cambiar (se llama padre). Se hace un segundo torneo, y del ganador se elige una rama aleatoriamente
(se llama donador). entonces se cambiar el padre con una rama del donador para generar un nuevo arbol.
Entre mayor sea el parámetro, mayor la probabilidad de que se haga este proceso en la creación de un arbol
- p_subtree_mutation. Parecido al p_crossover, excepto que en este caso, cuando se hace, el donador es
generado aleatoriamente sin necesidad de un torneo para ser donador (más agresivo).
- p_hoist_mutation: se usa para quitar elementos del arbol, se selecciona una rama, y se elige uno de
los elementos de esta. Se cambia toda la rama por solo ese elemento
- p_point_mutation: del padre se seleccionan algunos nodos y se cambian. Si es una variable se cambia por una variable
si es una operación se cambia por una operación. Para saber cuantos cambios se hacen, se usa p_point_replace,
donde se establece el promedio de cambios (donde 0 sería ningun cambio y 1 cambio en todos los nodos)


"Parsimonia del proceso".

- Pendiente.

# ---------------------------------------------------------------------------------------------- CHARLA -- #

Haremos una charla de divulgacion sobre el tema central de este trabajo. Será abierto a la comunidad ITESO,
con una duración de 2 horas, se dará un certificado de asistencia a las personas inscritas. El propósito
principal de esta charla es comunicar, de una manera amigable y con muchos ejemplos, el tema del uso de
gplearn para generar variables explicativas no lineales para usarlas en modelos lineales. Se va a compartir
un repositorio especial en github para que estén disponibles los códigos de ejemplo y notebooks. Será en
línea.

Pendientes iniciales
- NOMBRE DE CHARLA
- PEQUEÑA DESCRIPCION
- DIA Y HORA
- PLATAFORMA DE CONEXIÓN
- REPOSITORIO
- PONENTES: Francisco y Diana
- PRESENTADOR: Riemann

Pendientes posteriores
- INVITACIÓN TIPO POSTER CON NOMBRE, PEQUEÑA DESCRIPCIÓN, DIA, HORA, PLATAFORMA, PONENTES
- SESIÓN DE PRUEBA

# --------------------------------------------------------------------------------- PENDIENTES 6.NOV -- #

- Funcion para crear data set con futuros continuos (tener datos diarios).
- - Esperaremos a resultados de PAP
- Rutas heurísticas para definición de parámetros en gplearn.
- - Mutaciones y crossover (Diana)
- - Parsimonia del proceso (Francisco)
- Decidir y hacer divisiones de datos para train, test. (Diana)
- Ajuste de modelos (Francisco)
- - OLS
- - OLS con L1L2
- - LS-SVM
- Medidas de desempeño (Francisco).
- Comparacion entre modelos (Diana).
- Análisis de resultados de ajuste (Diana).
- Visualización de resultados (Francisco - Diana).
- Conclusiones (Francisco - Diana).
- Escribir secciones para el articulo (Pendiente).


# -------------------------------------------------------------------------------- PENDIENTES 17.DIC -- #


# - Hacer division de datos train y test sin filtraciones.

# - Hacer el tunning de arboles poco profundos y poco largos utilizando variaciones de parametros
    del symbolictransformer, a esto le llamaremos "Ruta heuristica para parsimonia de modelo" 
    y consistira en criterios para elegir ciertos parametros del SymbolicTransformer con la 
    finalidad de mantener variables simbolicas "poco complejas" y "faciles de explicar".

# - Con datos de train, correr symbolictransformer para generar 20 variables simbolicas

# - Hacer funcion para crear los features en test *utilizando las ecuaciones extraidas desde train

# - Hacer 4 modelos predictivos:
    (1) OlsNet: Regresion OLS con elasticnet forzado para clasificiacion
    (2) LogisticNet : Regresion logistica con elasticnet
    (3) L1-SVM : Support Vector Machine Clasificador con regularizacion L1
    (4) ANN-MLP : Perceptron multicapa con retropropagacion

# - Hacer y correr codigo de optimizacion de los hiperparametros de los modelos con algoritmos geneticos

# - visualizaciones y tablas de metricas de optimizacion

# - conclusiones cuantitativas.




{'summary': {'Ridge rss': 20256.307338828923, 'lasso rss': 20409.446926794717, 'elasticnet rss': 20409.446926794717}, 'ridge': {'rss': 20256.307338828923, 'predict': array([ -34.59189513,  -25.7604316 ,  -30.57022724,  -18.04516913,
        -15.38412835,   12.5646331 ,   43.11687828,  -19.93288092,
         -3.0422048 ,  -43.85290923,  -11.49644249,  -23.37487689,
        -38.48816909,   -8.96302194,  -38.52687954,  -16.17044203,
         -0.22657298,  -22.88338135,    7.45710802,  -21.95048588,
         73.77458274,   22.07509102,   23.99592327,    2.43958546,
        116.1533182 ,   32.4772478 ,   78.0914291 ,   25.0966531 ,
        -53.24403697,   98.12382759,   61.43904067,   96.91233058,
       -175.48651258,  -11.9855059 ,  -82.87849901,  -63.18178777,
         40.40627782, -206.00422839,  -82.99581843, -208.37882443,
        -15.9789665 ,   51.76962679,   58.30924339,   96.63619138,
        154.86260669,  112.57244715,  -97.85284853,    2.84894578,
        -72.3598471 ,  -84.36248881,  -57.47126153,   -8.74635165,
        111.43329509,  -68.61831346,   60.24716269,  -43.97345949,
         77.77916953,  -74.71823346,  -72.79130434,   -4.01990201,
        -15.57957013,  -14.8547358 ,  -36.90096346,  -28.63464774,
         28.9688198 ,    5.28826887,   12.33968365,   31.34394657,
         65.49075614,   27.50689258,  -39.40870278,  -51.17125939,
        -49.806534  ,   11.92212343,   14.31517678,  -33.27271246,
         57.57319228,   -5.17002493,  -37.44283217,   15.89540553,
         93.69454113,   41.24707939,   63.19169483,  -25.08429951,
        -44.14236724,   72.054109  ,    9.75098639,   55.70957255,
         30.64662713,   14.40745457,   42.27640476,   70.44322942,
         90.33527993,  -37.3484467 ,    7.67089665,   32.2097273 ,
         64.50600712,  -60.16788505,  -28.80461531,   29.20348286,
        -79.79120586,  -22.79000991,  -16.03471791,  -15.0841448 ,
         74.48814505,   44.6669143 ,  -28.84245225,  -40.79545516,
        -24.77329302,   42.00574162,  -18.17094191,    0.49880104,
         -1.42079473,   74.46168792,  -34.24712221,   56.03725039,
        -34.84188524,   20.50359997,   62.56813181,   26.43294297,
         32.41614442,  -13.21064941,   38.01747769]), 'model': Ridge(alpha=0.02, fit_intercept=False, max_iter=1000000.0), 'intercept': 0.0, 'coef': array([ 3.65995080e+01,  3.28172049e+01, -2.68061832e+01,  7.80790232e+00,
       -8.53612487e+00, -1.74580236e+01,  2.61412407e+01,  4.82668162e+00,
       -2.26093119e+01, -7.39350881e-01, -2.41477937e+01, -1.21866196e+01,
       -1.36360956e+00,  4.34518056e+00, -9.84921291e+00, -4.14158044e+00,
       -6.15685237e+00, -1.07640066e+01,  1.49271306e+01,  1.74608780e+00,
        1.49650027e+01,  1.90676704e+01, -2.58209418e+01, -2.17087095e-02,
       -1.56938795e+01,  7.58530158e+00, -1.38557013e+01, -4.50875164e+00,
       -8.57439140e+00, -6.03359091e+00,  7.03851774e+00,  4.23408655e-03,
       -3.40633393e+00, -1.70773668e-01,  9.97359416e+00,  4.93808426e+00,
        2.05325882e+01,  1.25190447e+00, -1.07438371e+01, -7.67560832e+00,
       -2.72986297e+00, -4.76433917e+00,  2.62458051e+00, -1.84875405e+00,
       -2.31543271e+00, -1.99631517e+00,  1.86753358e+01,  8.43434017e+00,
       -4.76210954e+00, -1.76585035e+00,  1.26869187e+00, -5.58620096e-01,
       -3.07896162e+00, -4.62938734e+00,  2.61958589e+00, -1.66683188e+00,
        1.05381297e+00, -5.37641826e+00,  7.12647063e+00,  5.15118607e-01,
       -1.29914085e+01, -5.70314963e+00, -1.15603531e+01, -1.46023519e+01,
       -4.51739170e+00, -5.48435838e+00, -4.29554028e-01, -4.01261159e+00,
        2.35928325e+01,  1.01020216e+01,  1.17092386e+01,  1.18606283e+01,
       -1.70284695e+01,  3.30161483e-01, -1.90147701e+01,  2.83639152e-01,
        3.47495424e-04,  5.49014416e-01, -4.47957018e+00, -2.65506525e+00,
        2.26427083e-01,  6.35652207e-02]), 'score': 0.9555094052897464}, 'lasso': {'rss': 20409.446926794717, 'predict': array([-3.46558443e+01, -2.55098045e+01, -3.01875988e+01, -1.79894874e+01,
       -1.44389068e+01,  1.13296690e+01,  4.35817417e+01, -2.11800823e+01,
       -3.56410826e+00, -4.30170380e+01, -1.17190463e+01, -2.36059166e+01,
       -3.84350466e+01, -7.73687646e+00, -3.89592026e+01, -1.61183821e+01,
        3.26432807e-01, -2.36165354e+01,  7.35226924e+00, -2.17122495e+01,
        7.25990130e+01,  2.21749095e+01,  2.23118522e+01,  3.51601741e+00,
        1.14646454e+02,  3.07422210e+01,  8.01793575e+01,  2.54476464e+01,
       -5.39376469e+01,  9.77628467e+01,  6.12256220e+01,  9.85004045e+01,
       -1.74234099e+02, -1.25975129e+01, -8.31911106e+01, -6.31788152e+01,
        4.12258666e+01, -2.06552039e+02, -8.36273308e+01, -2.07760412e+02,
       -1.56454863e+01,  5.07442868e+01,  5.85937352e+01,  9.64792440e+01,
        1.54724740e+02,  1.12099951e+02, -9.65707842e+01,  9.31879859e-01,
       -7.26552899e+01, -8.39088154e+01, -5.78055553e+01, -1.00737944e+01,
        1.12775488e+02, -6.78766419e+01,  6.07329436e+01, -4.25661692e+01,
        7.85309711e+01, -7.48104942e+01, -7.19980493e+01, -4.24578357e+00,
       -1.52434927e+01, -1.52488063e+01, -3.58120790e+01, -2.81885991e+01,
        2.61402239e+01,  7.23200240e+00,  1.19632631e+01,  3.06578964e+01,
        6.58714201e+01,  2.64362201e+01, -3.91049054e+01, -5.07508512e+01,
       -4.66264466e+01,  9.65136957e+00,  1.53281411e+01, -3.29297874e+01,
        5.69715058e+01, -5.07570281e+00, -3.82249031e+01,  1.61072390e+01,
        9.33863675e+01,  3.98977415e+01,  6.33447264e+01, -2.60149400e+01,
       -4.27068822e+01,  7.21324135e+01,  9.94552349e+00,  5.60432832e+01,
        3.09171541e+01,  1.37387835e+01,  4.25291103e+01,  7.00821487e+01,
        8.96976974e+01, -3.56647914e+01,  7.55749177e+00,  3.17948675e+01,
        6.42285030e+01, -6.08780410e+01, -2.95509585e+01,  2.62867983e+01,
       -7.74788120e+01, -2.33802649e+01, -1.65815366e+01, -1.34951079e+01,
        7.42538678e+01,  4.41832815e+01, -2.87959164e+01, -4.13173178e+01,
       -2.26185304e+01,  4.32803306e+01, -1.97783984e+01, -1.67044716e-02,
       -8.79706959e-01,  7.41790816e+01, -3.40893892e+01,  5.63992482e+01,
       -3.38276518e+01,  2.03834749e+01,  6.22903886e+01,  2.70047862e+01,
        3.21582193e+01, -1.35547913e+01,  3.76053190e+01]), 'model': Lasso(alpha=0.02, fit_intercept=False, max_iter=1000000.0), 'intercept': 0.0, 'coef': array([ 2.76637335e+01,  3.89506710e+01, -2.15197830e+01,  0.00000000e+00,
       -3.44685376e+00, -3.66383779e+01,  6.08010023e+01, -0.00000000e+00,
       -2.14482589e+01, -0.00000000e+00, -2.34845576e+01, -1.11800932e+01,
       -0.00000000e+00, -2.58230380e+00,  0.00000000e+00, -0.00000000e+00,
       -1.48257512e+01, -1.68842625e+01,  8.97896050e-01, -0.00000000e+00,
        1.39263609e+01,  1.56925442e+01, -2.24228386e+01,  0.00000000e+00,
       -1.96644813e+01, -0.00000000e+00, -5.98721231e+00, -4.76360782e+00,
       -2.45187968e-01, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
       -2.66594311e+00,  0.00000000e+00,  8.10050733e+00,  5.35682025e+00,
        1.51524046e+01, -0.00000000e+00, -2.99665912e+00, -1.03143709e+01,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
       -0.00000000e+00,  0.00000000e+00,  1.83414337e+01,  2.66155836e+00,
       -2.63919077e+00, -7.14615576e+00,  3.36265353e+00, -0.00000000e+00,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
        0.00000000e+00, -3.05478854e+00, -0.00000000e+00, -0.00000000e+00,
       -1.42274169e+01, -0.00000000e+00, -1.49625610e+00, -2.09211623e+01,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
        2.28266014e+01,  8.93548479e+00,  1.12779459e+01,  1.12242467e+01,
       -0.00000000e+00,  3.14769133e-01, -9.88275281e+00,  2.92866758e-01,
       -8.11314030e-03,  5.89863272e-01, -4.33895147e+00, -2.64043081e+00,
        2.31490470e-01,  4.82693198e-02]), 'score': 0.9551730522107613}, 'elasticnet': {'rss': 20409.446926794717, 'predict': array([-3.46558443e+01, -2.55098045e+01, -3.01875988e+01, -1.79894874e+01,
       -1.44389068e+01,  1.13296690e+01,  4.35817417e+01, -2.11800823e+01,
       -3.56410826e+00, -4.30170380e+01, -1.17190463e+01, -2.36059166e+01,
       -3.84350466e+01, -7.73687646e+00, -3.89592026e+01, -1.61183821e+01,
        3.26432807e-01, -2.36165354e+01,  7.35226924e+00, -2.17122495e+01,
        7.25990130e+01,  2.21749095e+01,  2.23118522e+01,  3.51601741e+00,
        1.14646454e+02,  3.07422210e+01,  8.01793575e+01,  2.54476464e+01,
       -5.39376469e+01,  9.77628467e+01,  6.12256220e+01,  9.85004045e+01,
       -1.74234099e+02, -1.25975129e+01, -8.31911106e+01, -6.31788152e+01,
        4.12258666e+01, -2.06552039e+02, -8.36273308e+01, -2.07760412e+02,
       -1.56454863e+01,  5.07442868e+01,  5.85937352e+01,  9.64792440e+01,
        1.54724740e+02,  1.12099951e+02, -9.65707842e+01,  9.31879859e-01,
       -7.26552899e+01, -8.39088154e+01, -5.78055553e+01, -1.00737944e+01,
        1.12775488e+02, -6.78766419e+01,  6.07329436e+01, -4.25661692e+01,
        7.85309711e+01, -7.48104942e+01, -7.19980493e+01, -4.24578357e+00,
       -1.52434927e+01, -1.52488063e+01, -3.58120790e+01, -2.81885991e+01,
        2.61402239e+01,  7.23200240e+00,  1.19632631e+01,  3.06578964e+01,
        6.58714201e+01,  2.64362201e+01, -3.91049054e+01, -5.07508512e+01,
       -4.66264466e+01,  9.65136957e+00,  1.53281411e+01, -3.29297874e+01,
        5.69715058e+01, -5.07570281e+00, -3.82249031e+01,  1.61072390e+01,
        9.33863675e+01,  3.98977415e+01,  6.33447264e+01, -2.60149400e+01,
       -4.27068822e+01,  7.21324135e+01,  9.94552349e+00,  5.60432832e+01,
        3.09171541e+01,  1.37387835e+01,  4.25291103e+01,  7.00821487e+01,
        8.96976974e+01, -3.56647914e+01,  7.55749177e+00,  3.17948675e+01,
        6.42285030e+01, -6.08780410e+01, -2.95509585e+01,  2.62867983e+01,
       -7.74788120e+01, -2.33802649e+01, -1.65815366e+01, -1.34951079e+01,
        7.42538678e+01,  4.41832815e+01, -2.87959164e+01, -4.13173178e+01,
       -2.26185304e+01,  4.32803306e+01, -1.97783984e+01, -1.67044716e-02,
       -8.79706959e-01,  7.41790816e+01, -3.40893892e+01,  5.63992482e+01,
       -3.38276518e+01,  2.03834749e+01,  6.22903886e+01,  2.70047862e+01,
        3.21582193e+01, -1.35547913e+01,  3.76053190e+01]), 'model': ElasticNet(alpha=0.02, fit_intercept=False, l1_ratio=1, max_iter=1000000.0), 'intercept': 0.0, 'coef': array([ 2.76637335e+01,  3.89506710e+01, -2.15197830e+01,  0.00000000e+00,
       -3.44685376e+00, -3.66383779e+01,  6.08010023e+01, -0.00000000e+00,
       -2.14482589e+01, -0.00000000e+00, -2.34845576e+01, -1.11800932e+01,
       -0.00000000e+00, -2.58230380e+00,  0.00000000e+00, -0.00000000e+00,
       -1.48257512e+01, -1.68842625e+01,  8.97896050e-01, -0.00000000e+00,
        1.39263609e+01,  1.56925442e+01, -2.24228386e+01,  0.00000000e+00,
       -1.96644813e+01, -0.00000000e+00, -5.98721231e+00, -4.76360782e+00,
       -2.45187968e-01, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
       -2.66594311e+00,  0.00000000e+00,  8.10050733e+00,  5.35682025e+00,
        1.51524046e+01, -0.00000000e+00, -2.99665912e+00, -1.03143709e+01,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
       -0.00000000e+00,  0.00000000e+00,  1.83414337e+01,  2.66155836e+00,
       -2.63919077e+00, -7.14615576e+00,  3.36265353e+00, -0.00000000e+00,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
        0.00000000e+00, -3.05478854e+00, -0.00000000e+00, -0.00000000e+00,
       -1.42274169e+01, -0.00000000e+00, -1.49625610e+00, -2.09211623e+01,
       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,
        2.28266014e+01,  8.93548479e+00,  1.12779459e+01,  1.12242467e+01,
       -0.00000000e+00,  3.14769133e-01, -9.88275281e+00,  2.92866758e-01,
       -8.11314030e-03,  5.89863272e-01, -4.33895147e+00, -2.64043081e+00,
        2.31490470e-01,  4.82693198e-02]), 'score': 0.9551730522107613}}